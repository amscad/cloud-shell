#!/bin/bash

START_TIME=$(date +"%T")

# Get the script path - used to include other files
SCRIPT_PATH=$(dirname "$(
	cd "${0%/*}" 2>/dev/null
	echo "$PWD"/"${0##*/}"
)")

# Files to include
CONFIG_PATH="$SCRIPT_PATH/config"		
BIN_PATH="$SCRIPT_PATH/bin"
# Set default BREWFILE/CASKFILE
BREWFILE="$CONFIG_PATH/Brewfile"
CASKFILE="$CONFIG_PATH/Caskfile"

# Check for command line parameters
for arg in "$@"; do
    case $arg in
        --vm=*)
            VM="${arg#*=}"
            shift
            ;;
    esac
done

# Update BREWFILE/CASKFILE based on 'vm' parameter
if [ "$VM" == "true" ]; then
    BREWFILE="$CONFIG_PATH/BrewfileVM"
    CASKFILE="$CONFIG_PATH/CaskfileVM"
elif [ "$VM" == "false" ]; then
    BREWFILE="$CONFIG_PATH/Brewfile"
    CASKFILE="$CONFIG_PATH/Caskfile"
fi
echo "BREWFILE: $BREWFILE"
echo "CASKFILE: $CASKFILE"


abort() {
	printf "%s\n" "$@"
	exit 1
}

########################[ OS check ]#############################################
echo "##################[ Debug info ]###########################################"

# Do this upfront to avoid wasting the users time
RUNNING_SYSTEM=$(uname -s)

# Check we're on a Mac, if so install and setup using homebrew.
if [ "$RUNNING_SYSTEM" != "Darwin" ]; then
	abort "Homebrew is only supported on macOS and Linux."
fi

# now check if running on a M1 or intel machine
UNAME_MACHINE="$(/usr/bin/uname -m)"

# work out which version of mac os we are running
MAJOR_MAC_VERSION=$(sw_vers -productVersion | awk -F '.' '{print $1 "." $2}')

echo "You are running on ${UNAME_MACHINE} architecture"
echo "Mac OS verion $MAJOR_MAC_VERSION"
echo "############################################################################"

# shellcheck disable=SC2154
# Print out the failure when exiting the script
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

# exit if there is an error
set -e

echo "
	#########################################################################
	Prompting for your password as it is needed to install the 
	latest Max OS updates and to ensure permssions on homebrew are setup 
	correctly.
	#########################################################################
	"

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until the script has finished
while true; do
	sudo -n true
	sleep 60
	kill -0 "$$" || exit
done 2>/dev/null &

########################[ Updating Mac OS ]####################################
# Update mac software
# echo "######################## 0. Updating mac os ########################"
# sudo softwareupdate -i -a
# echo "Updated mac os software"

########################[ Command line xcode ]#################################
# echo "################ 1. Install Apple command line tools ################"
# COMMANDLINE_TOOLS="/Library/Developer/CommandLineTools"
# if [ ! -d "$COMMANDLINE_TOOLS" ]; then
# 	xcode-select --install
# 	echo "Installed Xcode command line tools"
# else
# 	echo "Xcode command line tools already installed"
# fi

########################[ Check homebrew is installed ]########################
echo "############### 2. Using homebrew to install software ###############"
if test ! "$(command -v brew)"; then
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	# Evaluating shellenv to set needed properties to get brew to run - borrowed from homebrew install
	eval "$(/opt/homebrew/bin/brew shellenv)"
fi

########################[ Install homebrew apps ]##############################
echo "################### 3. Updating Homebrew formulae ###################"
brew update --force # https://github.com/Homebrew/brew/issues/1151
echo "Updated homebrew forcefully"

echo "Installing from brewfile $BREWFILE"
brew bundle --file "$BREWFILE"
echo "Installing from caskfile $CASKFILE"
brew bundle --file "$CASKFILE"

########################[ Run user customisations ]############################
echo "################### 4. Running personal stuff ###################"
# run anything from the user local file,
if [ -f "$USER.local" ]; then
	# shellcheck disable=SC1090				# not sure if still needed
	#sh "$USER.local"
	source "$USER.local"
fi


########################[ OH MY ZSH ]#########################################
echo "################### 5. Installing OHMYZSH ###################"
if [ ! -d "$HOME/.oh-my-zsh" ]; then
	echo "Setup oh-my-zsh"
	sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
fi


echo "Cleanup"
brew cleanup

END_TIME=$(date +"%T")

echo "Started at 	: $START_TIME"
echo "Ended at 	: $END_TIME"

echo "DONE!"
